package hidato;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import score.CtrlRanking;

public class CtrlPartida {
	private String usr;
	private Partida actual;
	
	//Creadora
	
	//1=Partida Random
	//2=Partida Personalitzada
	//3=Partida del Repositori
	//4=Carregar partida comensada
	//Tant en l'opcio 3 i 4, utilitzarem un id per indicara a quin taulell/partida ens referim dins del repositori
	public CtrlPartida(String usuari, int tipus_par, int mida, int forats, int fixos, String id){
		usr = new String(usuari);
		if(tipus_par==1)actual = new Partida();
		else if (tipus_par==2) actual = new Partida(mida, forats, fixos);
		else if (tipus_par==3){
			GestorTaulells tau = new GestorTaulells();
			TaulellHidato aux = tau.getTaulell(id,usr);
			if (aux.getMida()==0) System.out.println("Taulell Invalid");
			else actual = new Partida(aux);
		}
		else{
			GestorPartides par = new GestorPartides();
			Partida aux = par.getPartida(id,usr);
			actual = new Partida(aux);
		}
	}
	
	public boolean guardarPartida(String id){
		GestorPartides aux = new GestorPartides();
		System.out.println(usr);
		return aux.guardarPartida(id,actual,usr);
	}
	
	public void guardarRanking(CtrlRanking r){
		actual.setScore();
		int score = actual.getScore();
		int dificultad = 1;
		r.saveScore(dificultad, score, usr);
	}
	
	//Si el valor == 0, aleshores esborrem una casella
	//Si el retorn es fals, es que la casella no es pot modificar!!!
	//En cas que s'haigui modificat, si el valor de retorn==1, indica que hem rellenat tot el taulell
	public boolean[] modificarCas(int fila, int columna, int valor){//---------------------------------------------------------------
		return actual.modCas(fila, columna, valor);
	}
		
	
	//Consultores
	public int[][] mostrarTaulell(){
		return actual.getTauActual();		
	}
	
	public int getTime(){
		return actual.getTime();
	}
	
	public int getScore(){
		return actual.getScore();
	}
	
	private boolean generaTaulell (int[][] input, int tamany) {
		int perposar=0;
		int posats=0;
        List<Integer> list = new ArrayList<Integer>();
        Casilla[][] matriuJoc;
        int[][] matriuSolucio;
 
        matriuSolucio = new int[input.length+2][input[0].length+2];
        for (int x=0; x<tamany+2;  ++x){
        	matriuSolucio[0][x] = -1;
        	matriuSolucio[x][0] = -1;
        	matriuSolucio[tamany+1][x] = -1;
        	matriuSolucio[x][tamany+1] = -1;
        }
        
        for(int i=1; i<tamany+1; ++i){
        	for (int j=1;j<tamany+1; ++j){
        		matriuSolucio[i][j]= input[i-1][j-1];
        		if (input[i-1][j-1]==-1){
        			matriuJoc[i-1][j-1].setPosicion(j-1,i-1);
        			matriuJoc[i-1][j-1].setValor(-1);
        			matriuJoc[i-1][j-1].setEditable(false);
        		}
        		else if (input[i-1][j-1]==0){
        			matriuJoc[i-1][j-1].setPosicion(j-1,i-1);
        			matriuJoc[i-1][j-1].setValor(0);
        			matriuJoc[i-1][j-1].setEditable(true);
        			++perposar;
        		}
        		else {
        			matriuJoc[i-1][j-1].setPosicion(j-1,i-1);
        			matriuJoc[i-1][j-1].setValor(input[i-1][j-1]);
        			matriuJoc[i-1][j-1].setEditable(false);
        			list.add(input[i-1][j-1]);
                    if (input[i-1][j-1] == 1) start = new int[]{i,j};
        		}
        	}
        }
        
        Collections.sort(list);

        given = new int[list.size()];
        for (int i = 0; i < given.length; i++){
            given[i] = list.get(i);
            System.out.println(given[i]);
        }
        
        CtrlJoc juego = new CtrlJoc();
        if((start != null) && (given != null) && (matriuSolucio != null)) System.out.println("\nSolucionant...");
        else System.out.println("\nHi ha hagut un error");
        
        return juego.solucionador(start[0],start[1],1,0,given,matriuSolucio);
	}
}

